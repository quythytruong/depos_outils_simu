# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SimuDePOs
                                 A QGIS plugin
 Outils pour générer des données et simuler la collecte de déchets post-ouragans
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-12
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Quy Thy Truong
        email                : quy-thy.truong2@univ-eiffel
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QTableWidgetItem

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .depos_outils_simu_dialog import DePosMainWindow
from simu_damage2.simu_damage2_dialog import SimuDamageMainWindow

import os.path

from qgis.PyQt import uic, QtWidgets
from qgis.core import QgsFeature, QgsVectorLayerExporter, QgsFieldProxyModel, QgsMapLayerProxyModel
from qgis.core import QgsVectorLayer, QgsDataSourceUri, QgsProject, QgsApplication, QgsCoordinateReferenceSystem
from qgis.core import QgsExpressionContext, QgsExpressionContextUtils, QgsExpression, QgsField
from qgis.core import QgsProcessing, QgsProcessingFeatureSourceDefinition

from qgis.utils import iface
import processing
import pandas as pd
import psycopg2
from psycopg2 import Error

from .DePOs.CollecteDechets import dureeVidageZoneDepot, dureeCollecteBassin

class SimuDePOs:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SimuDePOs_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Outils Simulation DéPOs')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        '''
        self.simuCircuit1, self.simuCircuit2 = None, None # Circuits à simuler
        self.zdLayer1, self.zdLayer2, self.zdLayer3 = None, None, None  # Couches des zones de dépôt   
        self.traj2ZST, self.traj2Exutoire = [], [] # Chemins chargés
        self.dureeChgt, self.dureeDechgt = None, None # Durées des opérations
        # Durées des opérations : options avancées 
        self.isDureeChgtSelonVolume = None
        self.dureeMinChgt, self.dureeMaxChgt = None, None
        self.isDureeDechgtSelonVolume = None  
        self.dureeMinDechgt, self.dureeMaxDechgt = None, None
        self.isDureeChgtSelonEquipment = None
        self.equipmentAdAttr = None
        self.dureeEquipedAd = None
        self.isDureeDechgtSelonEquipment = None
        self.equipmentZstAttr = None
        self.dureeEquipedZST = None
        self.isPenaliteTrafic = None
        '''

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SimuDePOs', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        icon_path = ':/plugins/depos_outils_simu/truck.png'
        damage_icon_path = ':/plugins/depos_outils_simu/broken-roof.png'
               
        self.add_action(
            damage_icon_path,
            text=self.tr(u'Simuler des endommagements...'),
            callback=self.runSimuDamage,
            parent=self.iface.mainWindow())
        self.add_action(
            icon_path,
            text=self.tr(u'Simuler une collecte de déchets'),
            callback=self.runSimuCollecte,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Outils Simulation DéPOs'),
                action)
            self.iface.removeToolBarIcon(action)


    def runSimuCollecte(self):
        """Run waste collection simulation window """

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = DePosMainWindow()
        self.dlg.show()
        # Connect tools to push buttons
        self.dlg.pushButton.clicked.connect(self.startChooseLocationAd)
        self.dlg.pushButton_4.clicked.connect(self.startActeurParBassin)
        self.dlg.pushButton_7.clicked.connect(self.startConfigChemins)
        self.dlg.pushButton_simul.clicked.connect(self.runCollecte)
        self.dlg.pushButtonCalculCheminVersZST.clicked.connect(self.startPlusCourtChemin)
        # Menu Gisements de Déchets
        self.dlg.actionLocalisation_des_sources_de_d_chets_post_ouragans.triggered.connect(self.startLocateGisements)
       
    
    def runCollecte(self):
        """ Run waste collection simulation """
        
        self.paramInput = self.dlg.getInput() 
        self.dureeTotaleCollecte = []
        self.dureesCollecte= [] 
            
        if self.paramInput["isCollecteParBassin"]:
            #QMessageBox.information(None, 'TODO', 'Collecte par bassins !')
            print('self.affectationActeurBassin : {}'.format(self.affectationActeurBassin))
            for bassin in self.paramInput['bassinLayer'].getFeatures(): 
                # Récupère l'acteur affecté au bassin : le nombre de véhicules, la capacité maximale
                idBassin = bassin[self.paramInput['idBassin']]
                print('Bassin id. : {}'.format(idBassin))
                try:
                    nbv = self.affectationActeurBassin[str(idBassin)]['nb_vehicules'] # nombre de véhicules sur le bassin
                    capaMax =self.affectationActeurBassin[str(idBassin)]['capaciteMaxMoy_m3'] # capacité moyenne des véhicules du bassin                
                    self.paramInput['bassinLayer'].removeSelection()
                    self.paramInput['bassinLayer'].select([bassin.id()]) # Sélectionne le bassin courant
                except KeyError:
                    print( "Le bassin {} n'est pas affecté".format(idBassin))
                    continue
                
                # Extrait les entités des zones de chargement situés à l'intérieur du bassin courant
                extractChgt = PlusCourtChemin.extractZonesDepotInBassin(self.paramInput["zdLayer1"], self.paramInput['bassinLayer'])
                if extractChgt.featureCount() == 0 :
                    continue
                # Sélectionne les chemins correspondants
                select_chemins = []
                for zone in extractChgt.getFeatures():
                    id_origin = zone[self.idZoneChgtLayer]
                    for chemin in self.traj2ZST: # parcourt une liste de dictionnaires
                        if chemin['idAD'] == id_origin :
                            select_chemins.append(chemin)
                            break
                print('select_chemins = {}'.format(select_chemins))
                d1, d2 = SimuDePOs.collectDurationBassin(routingInfo = select_chemins, 
                                                        nbVehicules = self.paramInput["nbVehicules"],
                                                        capaMax = self.paramInput["capaMaxMoy"], 
                                                        duree_chgt = self.paramInput["dureeChgt"], 
                                                        duree_dechgt = self.paramInput["dureeDechgt"])
                self.dureesCollecte = self.dureesCollecte + d1
                self.dureeTotaleCollecte.append(d2)                                                        
                # Constitue une liste des ID des zones de chargement contenues dans le bassin
                # Sélectionne les chemins dont l'ID origine est contenu dans la liste constituée précédemment
            self.paramInput['bassinLayer'].removeSelection()
            print('Finally, self.dureesCollecte = {}\n AND self.dureeTotaleCollecte = {}'.format(self.dureesCollecte, self.dureeTotaleCollecte))
        else : 
            # self.dureesCollecte, self.dureeTotaleCollecte = self.collectDuration() 
            #
            d1, d2= SimuDePOs.collectDurationBassin(routingInfo = self.traj2ZST, 
                                                    nbVehicules = self.paramInput["nbVehicules"],
                                                    capaMax = self.paramInput["capaMaxMoy"], 
                                                    duree_chgt = self.paramInput["dureeChgt"], 
                                                    duree_dechgt = self.paramInput["dureeDechgt"])
            self.dureesCollecte = self.dureesCollecte + d1
            self.dureeTotaleCollecte.append(d2)
        QMessageBox.information(None, 'Fin de calcul', 'Simulation de collecte terminée !')
        print('Durée totale de la collecte : {} h'.format(self.dureeTotaleCollecte))
        # Affichage dans l'onglet Résultats
        self.dlg.recapScenario(paramScenario = self.paramInput) # Récapitule le scénario simulé           
        # Formate les résultats de durées de collecte globale
        #headerDureesTotales = [key_dict for key_dict in self.dureeTotaleCollecte.keys()] # Récupérer le header : clés du dictionnaire
        headerDureesTotales = [key_dict for key_dict in self.dureeTotaleCollecte[0].keys()] # Récupérer le header : clés du dictionnaire            
        #dureesTotales = list(self.dureeTotaleCollecte.values())           
        dureesTotales = [] # Liste des durées            
        for d in self.dureeTotaleCollecte:
            dureesTotales.append(list(d.values())) 
        self.dlg.displayResult(resultSimu = dureesTotales, header = headerDureesTotales)
        # Affichage dans l'onglet Visualisation
        headerDureesZones = [key_dict for key_dict in self.dureesCollecte[0].keys()]
        dureesZones = []
        for d in self.dureesCollecte:
            dureesZones.append(list(d.values()))
        self.dlg.displayVisu(resultSimu = dureesZones, header = headerDureesZones)
        '''    
        out1, out2 = self.outputLayer() # Couches de sortie : zones de chargement, de déchargement avec les durées et les volumes
        QgsProject.instance().addMapLayer(out1)
        QgsProject.instance().addMapLayer(out2)
        '''
    def collectDuration(self):
        """ 
        Calcule les durées pour vider chaque zone de dépôt (AD ou ZST)
        et la durée totale moyenne pour collecter toutes les zones de dépôt.
        
        """
        
        dureesCollecte = [] # Liste des durées de vidage des zones de chargement
        dureesVidageZoneDepot = [] # Indicateur de durée totale de la collecte
        for chemin in self.traj2ZST: # Parcourt les chemins chargés
            # Calcule la durée de vidage d'une zone de dépôt
            dureeVidage = dureeVidageZoneDepot(volumeDechets = chemin['volume'], 
                                                capaMaxVehicule = self.paramInput["capaMaxMoy"],
                                                distance_km = chemin['distance_km'],
                                                duree_chgt_h = self.paramInput["dureeChgt"],
                                                duree_dechgt_h = self.paramInput["dureeDechgt"]) 
            dureesVidageZoneDepot.append(dureeVidage)                                   
            infoVidage = {'id_chgt' : chemin['idAD'], 'id_dechgt': chemin['idZST'],
                        'volume_m3' : chemin['volume'], 
                        'distance_km' : chemin['distance_km'], 'duree_h' : dureeVidage}
            dureesCollecte.append(infoVidage)
        dureeTotaleCollecte = dureeCollecteBassin(dureesVidageZoneDepot, self.paramInput["nbVehicules"], nbHeuresTravailParJour = 8)
        #dureeTotaleCollecte['nbHeuresTravailParJour'] = 8
        return dureesCollecte, dureeTotaleCollecte
    
    def collectDurationBassin(routingInfo, nbVehicules = 3, capaMax = 32, circuit = 0, duree_chgt = 1.5, duree_dechgt = 1.5):
        """ 
        Calcule la durée de collecte sur un bassin.
        
        Parameters
        ----------
        routingInfo : dict
            Ensemble des informations pour calculer la durée de transfert des déchets.
            Les clés du dictionnaire sont:
                'idAD': id. de l'aire de dépose
                'idZST': id. de la zone de stockage temporaire
                'idExutoire' : id. de l'exutoire
                'volume' : volumes de déchets à transférer
                'distance_km' : distance entre la zone de chargement et de déchargement     
        nbVehicules : int, optional 
            Nombre de véhicules sur le bassin
        capaMax: float, optional
            capacité max moyenne d'un véhicule
        circuit: int, optional
            0 si transfert AD->ZST, 1 si transfert ZST->Exutoire
            
        Returns
        --------
        dureesCollecte: list of dict
            Contient les durées de vidage de chaque zone de chargement. Les clés d'un dictionnaire sont :
                'id_chgt' : id de la zone de chargement
                'id_dechgt': id de la zone de déchargement
                'volume_m3' : volume initial de déchets sur la zone de chargement                
                'distance_km' : distance entre les deux zones de dépôt
                'duree_h' : durée de vidage de la zone en heures
        dureesParBassin: list of dict
            Contient les durées de vidage totale de chaque bassin, en différentes unités. 
            Les clés d'un dictionnaire sont :
                'n_vehicules' : nombres de véhicules
                'capacite_max_m3': capacité d'un véhicule
                'duree_h' : durée en heures
                'duree_jour': durée en jours
                'duree_semaine': durée en semaine
                'duree_mois' : durée en mois
        """
        dureesCollecte = [] # Liste des durées de vidage des zones de chargement
        dureesVidageZoneDepot = [] # Indicateur de durée totale de la collecte
        #dureesParBassin = []
        if circuit == 0:
            for chemin in routingInfo:
                # Calcule la durée de vidage d'une zone de dépôt
                dureeVidage = dureeVidageZoneDepot(volumeDechets = chemin['volume'],  capaMaxVehicule = capaMax,
                                                distance_km = chemin['distance_km'],
                                                duree_chgt_h = duree_chgt,
                                                duree_dechgt_h = duree_dechgt) 
                dureesVidageZoneDepot.append(dureeVidage)                                   
                infoVidage = {'id_chgt' : chemin['idAD'], 'id_dechgt': chemin['idZST'],
                            'volume_m3' : chemin['volume'], 'distance_km' : chemin['distance_km'], 'duree_h' : dureeVidage}
                dureesCollecte.append(infoVidage)
            dureeTotale = dureeCollecteBassin(dureesVidageZoneDepot,nbVehicules, nbHeuresTravailParJour = 8)
            dureeTotale['n_vehicules'] = nbVehicules
            dureeTotale['capacite_max_m3']= capaMax
            #dureesParBassin.append(dureeTotale)
        elif circuit == 1 :
            pass        
        return dureesCollecte, dureeTotale #dureesParBassin
    
    def outputLayer(self):
        """
        Génère des couches de données en fin de simulation.
        
        """
        if self.paramInput['simuCircuit1']:
            """
            Reprend la couche des AD en y ajoutant une colonne de durée de vidage de la zone de dépôt
            """
     
            # Duplique la couche des AD en entrée : 
            # Sélectionne toutes les entités et les exporte dans une nouvelle couche
            self.paramInput['zdLayer1'].selectAll()
            adOutputLayer = processing.run("native:saveselectedfeatures", {'INPUT': self.paramInput['zdLayer1'], 'OUTPUT': 'memory:'})['OUTPUT']
            adOutputLayer.setCrs(QgsCoordinateReferenceSystem(self.paramInput['zdLayer1'].crs()))
            self.paramInput['zdLayer1'].removeSelection() # Dé-sélectionne toutes les entités sélectionnées de la couche
            
            # Ajoute un nouveau champ
            adOutputLayerPrv = adOutputLayer.dataProvider()
            adOutputLayerPrv.addAttributes([QgsField('duree_h',QVariant.Double)])
            adOutputLayer.updateFields()
            adOutputLayer.startEditing()
            for feat in adOutputLayer.getFeatures():
                idAD = feat[self.idZoneChgtLayer]
                for resultat in self.dureesCollecte:
                    if resultat['id_chgt'] == idAD:
                        feat['duree_h'] = resultat['duree_h']
                        adOutputLayer.updateFeature(feat)
                        break
            adOutputLayer.commitChanges()
            adOutputLayer.setName('1 - Zones de chargement')
            
            """
            Reprend la couche des ZST en y ajoutant plusieurs colonnes pour indiquer:
            - la durée pour collecter toutes les AD (en heures) : correspond à la durée max de vidage d'une AD
            - le volume total de déchets apportés sur chaque ZST
            - si la collecte s'est fait par bassin : indiquer l'identifiant du bassin
            """
            # Duplique la couche des ZST en entrée : 
            # Sélectionne toutes les entités et les exporte dans une nouvelle couche
            self.paramInput['zdLayer2'].selectAll()
            zstOutputLayer = processing.run("native:saveselectedfeatures", {'INPUT': self.paramInput['zdLayer2'], 'OUTPUT': 'memory:'})['OUTPUT']
            zstOutputLayer.setCrs(QgsCoordinateReferenceSystem(self.paramInput['zdLayer2'].crs()))
            self.paramInput['zdLayer2'].removeSelection() #self.unselectAll() # Dé-sélectionne toutes les entités
            
            # Ajoute un champ "durée de collecte" et un champs "volume total de déchets"
            zstOutputLayerPrv = zstOutputLayer.dataProvider()
            zstOutputLayerPrv.addAttributes([QgsField('duree_h',QVariant.Double),QgsField('vol_dechet_m3',QVariant.Double)])
            zstOutputLayer.updateFields()
            #print(zstOutputLayer.fields().names())
            zstOutputLayer.startEditing()
            for feat in zstOutputLayer.getFeatures():                
                volTotal = 0
                dureeMax = 0
                idZST = feat[self.idZoneDechgtLayer]
                for resultat in self.dureesCollecte:     
                    if resultat['id_dechgt'] == idZST:
                        volTotal = volTotal + resultat['volume_m3']
                        if resultat['duree_h'] > dureeMax :
                            dureeMax = resultat['duree_h']
                feat['duree_h'] = dureeMax
                feat['vol_dechet_m3'] = volTotal
                zstOutputLayer.updateFeature(feat)   
            zstOutputLayer.commitChanges()
            
            # Extrait uniquement les zones de dépôt qui ont reçu des déchets
            param_extract = {'INPUT' : zstOutputLayer,
            'EXPRESSION' : 'vol_dechet_m3 <>0',
            'OUTPUT': 'memory:'}
            extractOutput = processing.run('native:extractbyexpression',param_extract)['OUTPUT']
            extractOutput.setName('1 - Zones de déchargement')
            
            return adOutputLayer, extractOutput
    
    def runSimuDamage(self):
        """ Run damage simulation window """
        
        self.damage_dlg = SimuDamageMainWindow()
        self.damage_dlg.show()
        
    def startLocateGisements(self):
        """ Run waste deposit location tool """
        dialog = LocateGisementsDialog()
        result = dialog.exec_()
        if result:
            dialog.getPointsFromSelect()

    def startChooseLocationAd(self):
        """ Ouvre une boîte de dialogue permettant choisir le mode de localisation des AD """
        
        dialog = ChooseLocationAdDialog()
        # Run the dialog event loop
        result = dialog.exec_()
        # See if OK was pressed
        if result:
            if dialog.listWidget.currentItem().text() == 'Au centre des bâtiments endommagés':
                self.startLocateGisements()
            elif dialog.listWidget.currentItem().text() == 'Au bord des routes proches des bâtiments endommagés (~ aires de dépose)':
                self.startLocateIntersection()
                
    def startLocateIntersection(self): 
        """ 
        Ouvre la boîte de dialogue permettant de choisir la méthode de localisation des AD aux intersections.
        Une couche d'aires de dépose est alors produite et ajoutée au projet.        
        
        """

        dialog = ReseauRoutierDialog()
        result = dialog.exec_()
        if result:
            adLayer = dialog.locateAD()
            QgsProject.instance().addMapLayer(adLayer) # Add output layer to QGIS project


    def startActeurParBassin(self):
        """ Ouvre l'UI de collecte par bassin """
        self.paramInput = self.dlg.getInput()
        dialog = ActeurParBassinDialog(self.paramInput['bassinLayer'], self.paramInput['idBassin'])
        result = dialog.exec_()
        if result:
            self.affectationActeurBassin = dialog.affectation2Dict()
            print(self.affectationActeurBassin)
        
    def startConfigChemins(self):
        """ Ouvre une boîte de dialogue pour configurer les colonnes à utiliser dans la couche des chemins """
        
        dialog = ConfigAttrCheminsDialog(None)
        dialog.cheminLayer.setLayer(self.dlg.input_layer_ad_zst.currentLayer())
        result = dialog.exec_()
        if result:
            self.routingInfo = dialog.getParamInput()
            print(self.routingInfo)
            self.loadChemins(cheminLayer = self.routingInfo['cheminLayer'], 
                            originIdField = self.routingInfo['idADField'],
                            destinationIdField = self.routingInfo['idZSTField'],
                            distanceField = self.routingInfo['distanceField'],
                            volumeField = self.routingInfo['volumeField'],
                            distanceUnit = self.routingInfo['distUnit'],
                            circuit = 0)
            QMessageBox.information(None, "Fin de calcul", "Données chargées !")                    
    
    def loadChemins(self, cheminLayer, originIdField, destinationIdField, distanceField, volumeField, distanceUnit = 'm', circuit = 0):
        """ Charge les chemins entre les zones de dépôt
        
        Parameters
        ------------------
        cheminLayer: vector layer
            Couche des chemins calculés entre les zones de dépôts (AD -> ZST ou ZST -> Exutoires)
        originIdField: str
            Attribut ID des points de départ des déchets (AD ou ZST selon le circuit)
        destinationIdField: str
            Attribut ID des points de destination des déchets (ZST ou exutoires selon le circuit)
        distanceField: str
            Attribut de distance des chemins entre les zones de dépôt
        distanceUnit: str
            Unité des distances: 'm' si les distances sont en mètres, 'km' si elles sont en kilomètres 
        volumeField: str
            Attribut volume de déchets    
        circuit: int, optional
            Vaut 0 si circuit AD->ZST (par défaut), vaut 1 si circuit ZST-> exutoire
            
        """
        
        if circuit == 0: # Trajectoires vers ZST
            print(cheminLayer.featureCount())
            self.traj2ZST = []
            for elem in cheminLayer.getFeatures():
                if distanceUnit == 'm':
                    dist_km = float(elem[distanceField])/1000
                else :
                    dist_km = elem[distanceField]
                itineraire = {'idAD': elem[originIdField],
                             'idZST': elem[destinationIdField],
                             'distance_km': dist_km,
                             'volume' : elem[volumeField]
                            }
                self.traj2ZST.append(itineraire)
            #print("Trajectoires chargées :\n {}".format(self.traj2ZST))
        
        elif circuit == 1: # Trajectoires ZST->ISDND (A faire plus tard)
            pass

    def startPlusCourtChemin(self):
        """ Ouvre la boîte de dialogue pour configurer le calcul des plus courts chemins """
        
        self.paramInput = self.dlg.getInput()
        dialog = PlusCourtChemin(isCollecteParBassin = self.paramInput['isCollecteParBassin'], 
        bassinLayer = self.paramInput['bassinLayer'], idBassin = self.paramInput['idBassin'])
        dialog.zonechgtLayerInput.setLayer(self.dlg.suivi_couche_ad.currentLayer())
        dialog.zoneDechgtLayerInput.setLayer(self.dlg.suivi_couche_zst.currentLayer())
        result = dialog.exec_()
        if result:
            routing_output = dialog.calcul()
            # self.unselectAll() # Dé-sélectionne toutes les entités
            QgsProject.instance().addMapLayer(routing_output)
            # Récupère certains paramètres d'entrées nécessaires pour calculer les couches de sortie de simulation
            self.idZoneDechgtLayer = dialog.idZoneDechgtLayer # ID de la zone de déchargement
            self.idZoneChgtLayer = dialog.idZoneChgtLayer # ID de la zone de chargement
            self.volumeAttr = dialog.volumeDechets # Attribut volume de déchets
            dialog.close()
            
    '''
    def unselectAll(self):
        """ Désélectionne toutes les entités """
        
        for a in iface.attributesToolBar().actions():
                if a.objectName() == 'mActionDeselectAll':
                    a.trigger()
                    break
    '''                
FORM_CLASS_LOCATE_GISEMENTS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dialog_localisation_sources_dechets.ui'))

class LocateGisementsDialog(QtWidgets.QDialog, FORM_CLASS_LOCATE_GISEMENTS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LocateGisementsDialog, self).__init__(parent)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.showUniqueValues)
        
    def showUniqueValues(self):
        """ Display the unique values of the damage column """
        layer = self.mMapLayerComboBox.currentLayer()
        endommagementAttr = self.mFieldComboBox.currentText()
        uniquevalues_param = {'INPUT': layer, 'FIELDS': endommagementAttr}
        result = processing.run('qgis:listuniquevalues', uniquevalues_param)
        self.listWidget.addItems(result['UNIQUE_VALUES'].split(';'))
        
    def getPointsFromSelect(self):
        layer = self.mMapLayerComboBox.currentLayer()
        # Clone input layer
        layer.selectAll()
        layer_duplicata = processing.run("native:saveselectedfeatures", {'INPUT': layer, 'OUTPUT': 'memory:'})['OUTPUT']
        layer_duplicata.setCrs(QgsCoordinateReferenceSystem(layer.crs()))
        for a in iface.attributesToolBar().actions(): # Unselect all entities
            if a.objectName() == 'mActionDeselectAll':
                a.trigger()
                break
        # 1.1 Keep area and damage columns
        selectedFields = [self.mFieldComboBox.currentText(), self.mFieldComboBox_3.currentText()]
        if self.mFieldExpressionWidget.isExpression():
            exp = QgsExpression(self.mFieldExpressionWidget.currentText())
            print(exp)
            context = QgsExpressionContext()
            context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(layer_duplicata))
                
            layer_duplicata.dataProvider().addAttributes([QgsField('superficie', QVariant.Double)])
            layer_duplicata.startEditing()
            for f in layer_duplicata.getFeatures():
                context.setFeature(f)
                f['superficie'] = exp.evaluate(context)
                layer_duplicata.updateFeature(f)
            layer_duplicata.commitChanges()
            selectedFields.append('superficie')    
        else:
            selectedFields.append(self.mFieldExpressionWidget.currentText())              
        # 1.2. Get the other remaining fields (that will not appear in the output layer)   
        unselectedFields = []
        for field in layer_duplicata.dataProvider().fields():
            if field.name() not in selectedFields:
                unselectedFields.append(field.name())
            print([f for f in unselectedFields])            
        
        # 2. Extract rows that match the damage values input
        endommagementAttr = self.mFieldComboBox.currentText()
        expression = ''
        for value in self.listWidget.selectedItems():
            expression = expression + '"' +endommagementAttr + '" = ' + '\'' + value.text() + '\'' + ' OR '
        stop = len(expression)-4
        expression = expression[0: stop:]
        print(expression)
        extract_param = {'INPUT' : layer_duplicata, 'EXPRESSION' : expression, 'OUTPUT': 'memory:'}
        extract = processing.run('native:extractbyexpression', extract_param)
        extract['OUTPUT'].setCrs(QgsCoordinateReferenceSystem(layer_duplicata.crs()))    
        param_centroids = {'colonnessupprimer': unselectedFields, 'couchesdesgisements': extract['OUTPUT'], 'native:centroids_1:Aires de dépose (centroïdes)': 'memory:'}           
        centroids = processing.run('model:Localisation des AD - Centroide des gisements', param_centroids)
        centroids['native:centroids_1:Aires de dépose (centroïdes)'].setCrs(QgsCoordinateReferenceSystem(layer_duplicata.crs()))
        centroids['native:centroids_1:Aires de dépose (centroïdes)'].setName('gisements déchets')
        QgsProject.instance().addMapLayer(centroids['native:centroids_1:Aires de dépose (centroïdes)'])

# UI Localisation des aires de dépose
FORM_CLASS_LOCATE_AD, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dialog_localisation_ad1.ui'))
class ChooseLocationAdDialog(QtWidgets.QDialog, FORM_CLASS_LOCATE_AD):
    def __init__(self, parent=None):
        """Constructor."""
        super(ChooseLocationAdDialog, self).__init__(parent)
        self.setupUi(self)

FORM_CLASS_RESEAU_ROUTIER, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dialog_method_localisationAD.ui'))
class ReseauRoutierDialog(QtWidgets.QDialog, FORM_CLASS_RESEAU_ROUTIER):
    def __init__(self, dbname = 'depos', host = 'localhost', port = '5432', user = 'postgres', password = 'postgres', sslmode='disable', parent=None):
        """Constructor."""
        super(ReseauRoutierDialog, self).__init__(parent)
        self.setupUi(self)
        self.roadLayerCBox.setFilters(QgsMapLayerProxyModel.LineLayer) # Road layer input : filtering line layers
        self.idRoadFieldCBox.setFilters(QgsFieldProxyModel.Numeric) # ID road layer input : filtering numeric fields
        self.gisementsLayerCBox.setFilters(QgsMapLayerProxyModel.PolygonLayer) # Waste source layer input : filtering polygon layers
        self.dbname = dbname
        self.host = host
        self.port = port
        self.user = user
        self.password = password
        self.sslmode = sslmode

    def getParamInput(self):
        """ Get input parameters """
        
        self.roadLayer =  self.roadLayerCBox.currentLayer()
        self.gisementLayer =  self.gisementsLayerCBox.currentLayer()
        self.roadLayerId = self.idRoadFieldCBox.currentText()
        self.selectedMethod = self.listWidget.currentItem().text()
    
    def locateAD(self):
        """ Génère la couche des aires de dépose selon la méthode choisie par l'utilisateur """
        
        self.getParamInput()
        output = None
        if self.selectedMethod == 'Sur les routes principales':
            output = self.locateCentralIntersection()
        elif self.selectedMethod == 'Au plus proche des gisements initiaux':
            output = self.locateNearestIntersection()
        else :
            output = self.locateGroupingWasteSource()
        
        return output
        
    def importVerticeToDatabase(self):
        """ Import road network vertice to PostGIS database """
        uri = 'dbname=' + self.dbname+  ' host=' + self.host + ' port=' + self.port + ' user=' + self.user + ' password='+ self.password
        #uri = uri + ' table=' + self.table_name + ' (geom) '
        uri = uri + ' table= roads (geom) '
        self.dropTableIfExist(table_name = 'roads') # Supprime la table du réseau routier préexistante
        uri = uri + ' key = ' + '\'' + self.roadLayerId + '\''
        err = QgsVectorLayerExporter.exportLayer(self.roadLayer, uri, "postgres", self.roadLayer.crs(), options = {"overwrite": True})
        if err[0] != QgsVectorLayerExporter.NoError:
            print('Import layer {} failed with error {}'.format( self.roadLayer.name(), err) )
        else:
            print('Layer {} import ok'.format(self.roadLayer.name() ) )
            self.dropTableIfExist(table_name = 'roads_vertices_pgr')
            self.addColumnsRoad(table_name = 'roads')
            self.createTableVertice(table_name = 'roads', road_id = self.roadLayerId) # Importe le réseau routier et génère une table des sommets du graphe
            uri = QgsDataSourceUri()
            # set host name, port, database name, username and password
            uri.setConnection(self.host, self.port, self.dbname, self.user, self.password)
            # set database schema, table name, geometry column and optionally
            # subset (WHERE clause)
            uri.setDataSource("public", "roads_vertices_pgr", "the_geom")
            vlayer = QgsVectorLayer(uri.uri(False), "intersections", "postgres")
            return vlayer
 
    def addColumnsRoad(self, table_name = 'roads'):
        """ Add origin, destination and geometry columns to road table (including spatial index)"""
        
        try:
            connection = psycopg2.connect(user = self.user, password = self.password, host = self.host, port = self.port, database = self.dbname)
            cursor = connection.cursor()
            # Ajoute des colonnes & indexes spatiaux pour pg routing
            pgrouting_query = 'ALTER TABLE '+ table_name + ' ADD COLUMN origine integer;'
            pgrouting_query = pgrouting_query + ' ALTER TABLE '+ table_name + ' ADD COLUMN destination integer;'
            pgrouting_query = pgrouting_query + ' CREATE INDEX roads_origine_ini_idx ON '+ table_name + '(origine);'
            pgrouting_query = pgrouting_query + ' CREATE INDEX roads_destination_fin_idx ON '+ table_name + ' (destination);'
            pgrouting_query = pgrouting_query + ' ALTER TABLE '+ table_name + ' ADD COLUMN geom_2d geometry(LINESTRING,5490);' 
            pgrouting_query = pgrouting_query + 'UPDATE '+ table_name + ' SET geom_2d = ST_Force2D(geom);'
            print(pgrouting_query)
            cursor.execute(pgrouting_query)
            connection.commit()
            print("Columns added successfully in PostgreSQL ")
        except (Exception, psycopg2.DatabaseError) as error :
            print ("Error while adding PostgreSQL columns", error)
        finally:
            #closing database connection.
                if(connection):
                    cursor.close()
                    connection.close()
                    print("PostgreSQL connection is closed")
            
    def createTableVertice(self, table_name = '"public"."roads"', road_id = 'id'):
        """ Create a new PostGIS vertice table from road table """
        
        self.dropTableIfExist(table_name = 'public.vertices')
        try:
            connection = psycopg2.connect(user = self.user, password = self.password, host = self.host, port = self.port, database = self.dbname)
            cursor = connection.cursor()
            table_name = '\'' + table_name + '\''
            print(table_name)
            topology_query = 'SELECT pgr_createTopology(' + table_name + ', 0.0001,' + '\'geom_2d\', \'' + road_id + '\', ' +  '\'origine\', \'destination\');' 
            print(topology_query)
            cursor.execute(topology_query)
            connection.commit() 
            print("Table created successfully in PostgreSQL ")
        except (Exception, psycopg2.DatabaseError) as error :
            print ("Error while creating PostgreSQL table", error)
        finally:
            #closing database connection.
                if(connection):
                    cursor.close()
                    connection.close()
                    print("PostgreSQL connection is closed")
       
    def locateNearestIntersection(self):
        """ Positionne les aires de dépose aux intersections à proximité """
        
        intersectionsLayer = self.importVerticeToDatabase()
        self.makeHublines(intersectionsLayer) # Appariement gisements / intersections de route
        vlayer = self.assignationDechetsIntersections() # Sommer les déchets aux AD
        uri = QgsDataSourceUri() # Charge la couche dans QGIS
        uri.setConnection(self.host, self.port, self.dbname, self.user, self.password) # set host name, port, database name, username and password
        uri.setDataSource("public", "intersection_avec_dechets", "the_geom") # set database schema, table name, geometry column and optionally subset (WHERE clause)
        vlayer = QgsVectorLayer(uri.uri(False), "ad_au_plus_proche", "postgres")
        QgsProject.instance().addMapLayer(vlayer)
            
    def locateCentralIntersection(self):
        """ Positionne les aires de dépose aux intersections centrales et à proximité des gisements de déchets """
        
        """
        Traitements de l'algorithme 'model:Intersections centrales - hublines' :
        1. Extraire les sommets du réseau (ou graphe) routier
        2. Extraire les sommets les plus centraux => ceux dont la betweenness est dans le dernier quartile 
        3. Calcule les hublines
        """
        initial_params = {'gisements': self.gisementLayer, 'rseauroutier': self.roadLayer, 'reseauroutierattributid' : self.roadLayerId,
                            'qgis:distancetonearesthublinetohub_1:hubline': 'memory:'}
        hublines = processing.run('model:Intersections centrales - hublines', initial_params)['qgis:distancetonearesthublinetohub_1:hubline']
        # Importe les hublines dans PostGIS
        param_import = {'INPUT' : hublines, 'DATABASE' : self.dbname, 'SCHEMA' : 'public', 'TABLENAME' : 'hublines_ad_centrales', 'GEOMETRY_COLUMN' : 'geom'}
        processing.run('qgis:importintopostgis', param_import)
        sql = '''
                        DROP TABLE IF EXISTS ad_centrales; 
                        CREATE TABLE ad_centrales AS
                            SELECT a.id as id, sum(b.vol_dechet_m3) as vol_dechet_m3, a.the_geom as the_geom
                            from roads_vertices_pgr a, hublines_ad_centrales b 
                            where st_intersects(a.the_geom, b.geom)
                            group by a.id ;
                        '''
        print(sql)
        postgis_param = {'DATABASE': self.dbname, 'SQL': sql}
        processing.run('qgis:postgisexecutesql', postgis_param)
        # Charge la couche dans QGIS
        uri = QgsDataSourceUri()
        # set host name, port, database name, username and password
        uri.setConnection('localhost', '5432', 'depos', 'postgres', 'postgres')
        # set database schema, table name, geometry column and optionally subset (WHERE clause)
        uri.setDataSource("public", "ad_centrales", "the_geom")
        vlayer = QgsVectorLayer(uri.uri(False), "aires_depose_centrales", "postgres")
        #QgsProject.instance().addMapLayer(vlayer)
        return vlayer
        
    def makeHublines(self, intersectionsLayer):
        """ 
        Construit les lignes d'appariement entre la couche des gisements et des intersections de routes.
        Le résultat est enregistré sous une table 'hublines' dans PostGIS. 
        """
        
        # Lancer l'algorithme d'appariement entre les gisements et les intersections
        self.dropTableIfExist(table_name = 'hublines') # Supprime une éventuelle table hublines pré-existante
        uri = 'postgres:dbname=' + self.dbname+  ' host=' + self.host + ' port=' + self.port + ' user=' + self.user + ' password='+ self.password
        uri = uri + ' table= hublines (geom) '
        algresult = processing.run('qgis:distancetonearesthublinetohub', # utiliser processing.RunAndLoad() pour charger directement
                    {'INPUT': self.gisementLayer, 'HUBS': intersectionsLayer, 'FIELD' : 'id', 'UNIT' : 0, 'OUTPUT': uri})
                        
    def locateGroupingWasteSource(self):
        """ Positionne les aires de dépose en regroupant les petits gisements proches """
        
        intersectionsLayer = self.importVerticeToDatabase()# Importe les intersections de routes dans PostGIS
        self.makeHublines(intersectionsLayer) # Appariement gisements / intersections proches
        # Importe les gisements dans PostGIS
        uri = 'dbname=' + self.dbname+  ' host=' + self.host + ' port=' + self.port + ' user=' + self.user + ' password='+ self.password
        uri = uri + ' table= gisements (geom) '
        err = QgsVectorLayerExporter.exportLayer(self.gisementLayer, uri, "postgres", self.gisementLayer.crs(), options = {"overwrite": True})
        if err[0] != QgsVectorLayerExporter.NoError:
            print('Import layer {} failed with error {}'.format(self.gisementLayer.name(), err))
        else:
            # 1. Pour les gisements dont les hublines qui croisent des routes : projection des gisements sur le tronçon le plus proche                 
            sql = '''
                    DROP TABLE IF EXISTS proj_bati_sur_route;
                    CREATE TABLE proj_bati_sur_route AS
                    SELECT centroid_troncon.fid, centroid_troncon.vol_dechet_m3, ST_ClosestPoint(geom, the_geom) as geom
                    FROM
                        (SELECT tbl2.id, tbl2.geom, tbl3.fid, tbl3.geom as the_geom, tbl1.vol_dechet_m3
                        FROM 
                        hublines tbl1,
                        roads tbl2,
                        gisements tbl3
                        WHERE ST_INTERSECTS(tbl1.geom, tbl2.geom) 
                        AND NOT st_touches(tbl1.geom, tbl2.geom) 
                        AND tbl3.fid = tbl1.fid) AS centroid_troncon;
                    '''
            postgis_param = {'DATABASE': 'depos', 'SQL': sql}
            processing.run('qgis:postgisexecutesql', postgis_param)
            # 2. Suppression des hublines qui croisent les routes
            sql = ''' 
                    DELETE FROM hublines WHERE fid IN
                    (SELECT tbl1.fid
                    FROM 
                    hublines tbl1,
                    proj_bati_sur_route tbl2
                    WHERE
                    tbl1.fid = tbl2.fid
                    );
                '''
            postgis_param = {'DATABASE': 'depos', 'SQL': sql}
            processing.run('qgis:postgisexecutesql', postgis_param)
            # 4. Assignation des déchets des gisements vers les intersections les plus proches avec la table hublines à jour
            self.assignationDechetsIntersections()
            # 3. Création d'une table d'AD potentielles : fusionne                     
            sql = '''
                    DROP TABLE IF EXISTS ad_potentielles;
                    CREATE TABLE  ad_potentielles AS TABLE intersection_avec_dechets;
                    ALTER TABLE ad_potentielles ADD COLUMN origin VARCHAR;
                    UPDATE ad_potentielles SET origin = 'intersection';
                        
                    INSERT INTO ad_potentielles (id, the_geom, vol_dechet_m3)
                        SELECT fid as id,  geom, vol_dechet_m3
                        FROM proj_bati_sur_route;
                        UPDATE ad_potentielles SET origin = 'projection' WHERE origin IS NULL;
                    ALTER TABLE ad_potentielles ADD COLUMN id_optim SERIAL PRIMARY KEY;
                '''
            postgis_param = {'DATABASE': 'depos', 'SQL': sql}
            processing.run('qgis:postgisexecutesql', postgis_param)
            # 5. Optimisation des volumes et des distances : ouvrir une boîte de dialogue de paramétrage
            optim_dialog = OptimisationVolumeDistanceDialog()
            optim_result = optim_dialog.exec_()
            if optim_result : 
                percent = optim_dialog.doubleSpinBox.value()/100
                sql = 'call buffer_ad({},{},{},{},{},{},{},{});'.format(optim_dialog.volume1.value(),
                optim_dialog.volume2.value(), optim_dialog.volume3.value(), optim_dialog.rbuffer1.value(),
                optim_dialog.rbuffer2.value(), optim_dialog.rbuffer3.value(), optim_dialog.rbuffer4.value(), percent)
                        
                postgis_param = {'DATABASE': 'depos', 'SQL': sql}
                processing.run('qgis:postgisexecutesql', postgis_param)
                        
                sql = 'call regroupement_ad({},{});'.format(optim_dialog.doubleSpinBox_2.value(), percent)
                postgis_param = {'DATABASE': 'depos', 'SQL': sql}
                processing.run('qgis:postgisexecutesql', postgis_param)
                        
                # Charge la couche dans QGIS
                uri = QgsDataSourceUri()
                # set host name, port, database name, username and password
                uri.setConnection('localhost', '5432', 'depos', 'postgres', 'postgres')
                # set database schema, table name, geometry column and optionally subset (WHERE clause)
                uri.setDataSource("public", "ad_optim", "the_geom")
                vlayer = QgsVectorLayer(uri.uri(False), "aires_depose_optimisees", "postgres")
                #QgsProject.instance().addMapLayer(vlayer)
                return vlayer
   
    def assignationDechetsIntersections(self):
        """ 
        Cumule les volumes des déchets aux gisements 
        sur les intersections qui leurs ont été assignées 
        dans une nouvelle table PostGIS (intersection_avec_dechets)
        """
        
        sql= '''            
                DROP TABLE IF EXISTS intersection_avec_dechets;
                CREATE TABLE intersection_avec_dechets AS
                    SELECT id, the_geom
                    FROM roads_vertices_pgr
                    WHERE id IN
                    (SELECT DISTINCT ON ("HubName") CAST ( "HubName" AS integer ) AS idz
                     FROM hublines);
                                    
                ALTER TABLE intersection_avec_dechets ADD COLUMN vol_dechet_m3 double precision;
                UPDATE intersection_avec_dechets SET vol_dechet_m3 = 
                    (SELECT SUM(tbl1.vol_dechet_m3)
                    FROM 
                        hublines tbl1,
                        intersection_avec_dechets tbl2
                    WHERE 
                        intersection_avec_dechets.id = tbl2.id
                    AND
                        "HubName" = CAST(tbl2.id as varchar)
                    );
            '''
        postgis_param = {'DATABASE': 'depos', 'SQL': sql}
        processing.run('qgis:postgisexecutesql', postgis_param)
        
    def dropTableIfExist(self, table_name = 'roads'):
        """ Drop PostGIS existing table """
        try:
            connection = psycopg2.connect(user = "postgres",
                                          password = "postgres",
                                          host = "localhost",
                                          port = "5432",
                                          database = "depos")
            cursor = connection.cursor()

            pg_drop_query = 'DROP TABLE IF EXISTS ' + table_name +' CASCADE;'
            if table_name == 'roads':
                pg_drop_query =  pg_drop_query + ' DROP INDEX IF EXISTS roads_origine_ini_idx, roads_destination_fin_idx; '
            print(pg_drop_query)
            cursor.execute(pg_drop_query)
            connection.commit()
            print("Table dropped successfully in PostgreSQL ")
        except (Exception, psycopg2.DatabaseError) as error :
            print ("Error while creating PostgreSQL table", error)
        finally:
            #closing database connection.
                if(connection):
                    cursor.close()
                    connection.close()
                    print("PostgreSQL connection is closed")
                    
FORM_CLASS_OPTIM, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dialog_optim_volumes_distances.ui'))
class OptimisationVolumeDistanceDialog(QtWidgets.QDialog, FORM_CLASS_OPTIM):
    def __init__(self, parent=None):
        """Constructor."""
        super(OptimisationVolumeDistanceDialog, self).__init__(parent)
        self.setupUi(self)  
        
FORM_CLASS_CHEMIN, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dialog_config_chemins_ad_zst.ui'))
class ConfigAttrCheminsDialog(QtWidgets.QDialog, FORM_CLASS_CHEMIN):
    def __init__(self, cheminLayer, parent=None):
        """Constructor."""
        super(ConfigAttrCheminsDialog, self).__init__(parent)
        self.setupUi(self)
        self.cheminLayer.setLayer(None)
        self.cheminLayer.setLayer(cheminLayer)
        self.distanceCBox.setFilters(QgsFieldProxyModel.Numeric)
        self.volumeCBox.setFilters(QgsFieldProxyModel.Numeric)
    
    def getParamInput(self):
        """ Get info about disposal sites routing layer """
        param = {}
        param['cheminLayer'] = self.cheminLayer.currentLayer()
        param['idADField'] = self.idAdCBox.currentText()
        param['idZSTField'] = self.idZstCBox.currentText()
        param['distanceField'] = self.distanceCBox.currentText()
        param['distUnit'] = self.unitCBox.currentText()
        param['volumeField'] = self.volumeCBox.currentText()
        return param

# UI Acteurs par bassin
FORM_CLASS_ACTEUR_BASSIN, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dialog_acteurParBassin.ui'))
class ActeurParBassinDialog(QtWidgets.QDialog, FORM_CLASS_ACTEUR_BASSIN):
    """ 
    Définit les acteurs définit les zones de dépôts de chargement/déchargement 
    dans chaque bassin de collecte.
    """
    
    def __init__(self, bassinLayer, idBassin, parent=None):
        """Constructor."""
        super(ActeurParBassinDialog, self).__init__(parent)
        self.setupUi(self)  
        self.bassinLayer_CBox.setLayer(bassinLayer)
        self.updateBassinID(idBassin)
        self.mQgsFileWidget.fileChanged.connect(self.importCSV)
        self.dataAffectation = []
    
    def updateBassinID(self, idBassin):
        """ Compte le nombre de bassins et met à jour la colonne du QTableWidget """
        bassins = self.bassinLayer_CBox.currentLayer()
        if not bassins is None:
            self.tableWidget.setRowCount(bassins.featureCount())
            nrow = 0
            for b in bassins.getFeatures():
                newitem = QTableWidgetItem(str(b[idBassin]))
                self.tableWidget.setItem(nrow, 0, newitem)
                nrow = nrow+1 
        
    def importCSV(self):
        """ Importe un tableau d'affectations acteurs/bassins sous forme de fichier CSV """
        import csv
        csvFilePath = self.mQgsFileWidget.filePath()
        #QtWidgets.QMessageBox.information(None, "Fin de calcul", self.mQgsFileWidget.filePath())
        with open(csvFilePath, newline='') as csvfile:
            csv_reader = csv.reader(csvfile, delimiter=';')
            rows = list(csv_reader)
            totalrows = len(rows) # Nombre de lignes
            #print('totalrows : {}'.format(totalrows))
            self.tableWidget.setRowCount(totalrows-1)
            for i in range(totalrows):
                if i ==0 :
                    continue
                row = rows[i]
                for j in range(len(row)):
                    item = QtWidgets.QTableWidgetItem(row[j])
                    #print(row[j])
                    self.tableWidget.setItem(i-1, j, item)
            self.dataAffectation=  rows[1::] # A stocker dans le modèle de données
            #print(self.dataAffectation)
            
    def getDataInput(self):
        """ Récupère les informations du tableau des affectations """
        # TODO
        pass
    
    def affectation2Dict(self):
        """ 
        Transforme les affectations acteurs/bassins d'une liste de listes 
        en dictionnaire de dictionnaires dont la clé est l'ID du bassin
        
        """
        affectationDict = {}
        for acteur in self.dataAffectation:
            affectationDict[acteur[0]] = {'nom' : acteur[1], 'nb_vehicules' : int(acteur[2]), 'capaciteMaxMoy_m3': float(acteur[3])}
        return affectationDict
        
# UI Calcul de plus court chemin
FORM_CLASS_CALCUL_CHEMIN, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'dialog_pluscourtchemin.ui'))
class PlusCourtChemin(QtWidgets.QDialog, FORM_CLASS_CALCUL_CHEMIN):
    def __init__(self, isCollecteParBassin = False, bassinLayer = None, idBassin = None, parent=None):
        """Constructor."""
        super(PlusCourtChemin, self).__init__(parent)
        self.setupUi(self)  
        self.roadLayer_CBox.setFilters(QgsMapLayerProxyModel.LineLayer)
        self.roadLayer_CBox.setLayer(None)
        self.zonechgtLayerInput.setLayer(None)
        self.zoneDechgtLayerInput.setLayer(None)
        
        self.idBassin = idBassin
        if isCollecteParBassin :
            self.frameBassin.setHidden(False)
            self.bassinLayer_CBox.setLayer(bassinLayer)
        else : 
            self.frameBassin.setHidden(True)
            self.bassinLayer_CBox.setLayer(None)
        self.tableCorrespondance = None
            
    def getDataInput(self):
        """ Renvoie les données entrées en paramètres """
        self.roadLayer = self.roadLayer_CBox.currentLayer()
        self.zoneChgtLayer = self.zonechgtLayerInput.currentLayer()
        self.zoneDechgtLayer = self.zoneDechgtLayerInput.currentLayer()
        self.idZoneChgtLayer = self.idFieldCBox.currentText()
        self.idZoneDechgtLayer = self.idFieldCBox_2.currentText()
        self.volumeDechets = self.volumeFieldCBox.currentText()
        self.bassinLayer = self.bassinLayer_CBox.currentLayer()                  
    
    def odMatrix(network_layer, from_point_layer, from_id_field, to_point_layer, to_id_field):
        """
        Calcule la matrice des distances avec QNEAT3.
        
        Parameters
        -----------
        network_layer : Couche de lignes
            Réseau routier
        from_point_layer: Couche des points de départ 
            Zones de chargement
        from_id_field: Attribut
            Identifiant unique de la couche de points de départ
        to_point_layer: Couche des points d'arrivées (
            Zones de déchargement
        to_id_field: Attribut
            Identifiant unique de la couche de points d'arrivée
            
        Returns
        --------
        odMatrix: Couche de lignes
            Matrice de distance entre les n points de départ et les m points d'arrivée
        """
        paramQNEAT3 = {
                'INPUT': network_layer,
                'FROM_POINT_LAYER' : from_point_layer,
                'FROM_ID_FIELD' : from_id_field,
                'TO_POINT_LAYER': to_point_layer,
                'TO_ID_FIELD' : to_id_field,
                'STRATEGY' : 0,
                'OUTPUT' : 'memory:'
                }
        odMatrix = processing.run('qneat3:OdMatrixFromLayersAsLines', paramQNEAT3)['OUTPUT']
        return odMatrix
    
    def getMinCostFromOdMatrix(odMatrix):
        """
        Cherche les plus courts chemins dans une matrice de distance.
        
        Parameters
        --------------
        odMatrix : couche vecteur (lignes)
                Matrice (m:n) des distances calculées entre les zones de dépôt. 
                Ses attributs sont :
                    origin_id
                        ID du point d'origine
                    destination_id 
                        ID du point d'arrivée
                    entry_cost 
                        distance (ou durée) entre le point d'origine et le tronçon de route le plus proche
                    network_cost
                        longueur (ou durée) du plus court chemin sur le réseau routier
                    exit_cost
                        distance (ou durée) entre le point d'arrivée et le tronçon de route le plus proche
                    total_cost
                        distance total (ou durée totale) entre le point d'origine et d'arrivée
        """        
        paramUniqueValues = {'INPUT': odMatrix, 'FIELDS' : 'origin_id', 'OUTPUT': 'memory:'}
        uniqueid = processing.run('qgis:listuniquevalues', paramUniqueValues)['OUTPUT'] # Identifiants uniques des AD
        selected_fid = [] # Liste des plus courts chemins
        for id in uniqueid.getFeatures():
            odMatrix.selectByExpression("origin_id={}".format(id['origin_id']))
            features = odMatrix.selectedFeatures()
            minCost = features[0]['total_cost']
            plusCourtChemin = features[0]
            for feat in features : 
                #print("feat['total_cost'] = {}".format(feat['total_cost']))
                if feat['total_cost'] is None :
                    continue
                if feat['total_cost'] < minCost:
                    minCost = feat['total_cost']
                    plusCourtChemin = feat
            selected_fid.append(plusCourtChemin.id())
            odMatrix.removeSelection()
        # Sauvegarde tous les plus courts chemins sélectionnés
        odMatrix.select(selected_fid)
        uniqueschemins = processing.run("native:saveselectedfeatures", {'INPUT': odMatrix, 'OUTPUT': 'memory:'})['OUTPUT']
        uniqueschemins.setCrs(QgsCoordinateReferenceSystem(odMatrix.crs()))
        return uniqueschemins

    
    def extractZonesDepotInBassin(zdLayer, bassinLayer):
        """ 
        Extrait les zones de dépôts situées à l'intérieur d'un bassin sélectionné
        
        Parameters
        ------------
        zdLayer: QgsProcessingParameterVectorLayer
            Zones de dépôt
        bassinLayer: QgsProcessingParameterFeatureSource
            Couche bassin de collecte avec des entités sélectionnées
            
        Returns
        ---------
        output
            Les zones de dépôt contenues dans le bassin
        """
        paramSelect = {
                        'INPUT' : zdLayer,
                        'PREDICATE': 6,
                        'INTERSECT': QgsProcessingFeatureSourceDefinition(bassinLayer.id(), True), # entités sélectionnées de la couche
                        'METHOD':0,
                        'OUTPUT': 'memory:'
                    }
        output = processing.run('native:extractbylocation', paramSelect)['OUTPUT']
        return output
        
    
    def calcul(self):
        """
        Calcule les plus courts chemins selon différents cas de figure
        (avec ou sans bassin de collecte, avec ou sans table de correspondance)
        
        """
        self.getDataInput()
        odMat = None
        if self.bassinLayer is None : # Un seul bassin de collecte
            # Calcule les chemins entre les couches des zones de chargement et de déchargement en entrée
            odMat = PlusCourtChemin.odMatrix(network_layer = self.roadLayer, 
            from_point_layer = self.zoneChgtLayer, from_id_field = self.idZoneChgtLayer,
            to_point_layer = self.zoneDechgtLayer, to_id_field = self.idZoneDechgtLayer)
            if self.tableCorrespondance is None:
                # S'il y a plus d'une zone de déchargement 
                # sélectionne les chemins de coût minimum dans la matrice de distance
                if  self.zoneDechgtLayer.featureCount() > 1 : 
                    odMat = PlusCourtChemin.getMinCostFromOdMatrix(odMat)
            else: # Avec table de correspondance : TODO
                # Sélectionne uniquement les chemins dont les ID origine / destination 
                # sont spécifiés dans la table de correspondance
                pass
        else : # Plusieurs bassins de collecte
            odMatList = []
            for bassin in self.bassinLayer.getFeatures():
                self.bassinLayer.removeSelection()
                self.bassinLayer.select([bassin.id()]) # Sélectionne le bassin courant
                # Extrait les entités des couches de chargement situés à l'intérieur du bassin courant
                extractChgt = PlusCourtChemin.extractZonesDepotInBassin(self.zoneChgtLayer, self.bassinLayer)
                if extractChgt.featureCount() == 0 :
                    continue
                if self.tableCorrespondance is None:
                    # Extrait les entités des couches de déchargement situés à l'intérieur du bassin courant
                    extractDechgt = PlusCourtChemin.extractZonesDepotInBassin(self.zoneDechgtLayer, self.bassinLayer)
                    print('Bassin ID : {}'.format(bassin.id()))
                    print('{} zones de chargement et {} zones de déchargement'.format(extractChgt.featureCount(), extractDechgt.featureCount()))
                    if extractDechgt.featureCount() == 0 :
                        continue                    
                    # Calcule les distances entre les zones sélectionnées dans les deux couches
                    odMatBassin = PlusCourtChemin.odMatrix(network_layer = self.roadLayer, 
                    from_point_layer = extractChgt, from_id_field = self.idZoneChgtLayer,
                    to_point_layer = extractDechgt, to_id_field = self.idZoneDechgtLayer)
                    print('{} chemins calculés '.format(odMatBassin.featureCount()))
                    # Sélectionne les chemins les plus courts s'il y a plus d'une zone de déchargement
                    if  extractDechgt.featureCount() > 1 : 
                        odMatBassin = PlusCourtChemin.getMinCostFromOdMatrix(odMatBassin)
                else: # Cas d'une table de correspondance
                    pass # TODO
                # Concatène les chemins calculés sur le bassin
                odMatList.append(odMatBassin)
            # Fusionne dans une couche tous les chemins calculés dans chaque bassin
            if len(odMatList) > 0:
                print('Fusion de {} bassins'.format(len(odMatList)))
                merge_param = {'LAYERS': odMatList,  'CRS': self.zoneChgtLayer.crs(), 'OUTPUT': 'memory:'}
                odMat = processing.run("qgis:mergevectorlayers", merge_param)['OUTPUT']  
            self.bassinLayer.removeSelection()
        # Jointure de l'attribut volume de la couche des points de départ
        print('Jointure de de l\'attribut volume')
        paramJoin = {
            'INPUT' : odMat, 'FIELD': 'origin_id',
            'INPUT_2': self.zoneChgtLayer, 'FIELD_2' : self.idZoneChgtLayer, 'FIELDS_TO_COPY' : self.volumeDechets,
            'METHOD' : 1, 'OUTPUT' : 'memory:'}
        cheminsOutput = processing.run('native:joinattributestable', paramJoin)['OUTPUT']
        # Renvoie le résultat
        return cheminsOutput
