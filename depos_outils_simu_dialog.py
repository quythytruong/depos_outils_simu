# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SimuDePOsDialog
                                 A QGIS plugin
 Outils pour générer des données et simuler la collecte de déchets post-ouragans
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-11-12
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Quy Thy Truong
        email                : quy-thy.truong2@univ-eiffel
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtWidgets
from qgis.core import QgsMapLayerProxyModel
from .fenetre_principale_depos7 import Ui_MainWindow


class DePosMainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, *args, obj=None, **kwargs):
        super(DePosMainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)
        self.suivi_couche_ad.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.suivi_couche_zst.setFilters(QgsMapLayerProxyModel.PointLayer)
        self.suivi_couche_ad.setLayer(None)
        self.suivi_couche_zst.setLayer(None)
        self.suivi_couche_exutoire.setLayer(None)
        self.input_layer_ad_zst.setLayer(None)
        # Push buttons
        self.partition_radio_on.toggled.connect(lambda : self.pushButton_6.setEnabled(True)) # Collecte par bassin : ON
        self.partition_radio_off.toggled.connect(lambda : self.pushButton_6.setEnabled(False)) # Collecte par bassin : OFF
        self.pushButton_5.clicked.connect(lambda: self.fenetre_ppale.setCurrentWidget(self.tab))
        # Command line buttons        
        self.command_param_durees.clicked.connect(lambda: self.fenetre_ppale.setCurrentWidget(self.tab_durees))
        self.command_voir_resultats_simu.clicked.connect(lambda: self.fenetre_ppale.setCurrentWidget(self.tab3_result))
    
    def getInput(self):
        """ Récupère les données de paramétrage utiles pour la simulation """
        # Circuits à simuler
        simuCircuit1 = self.checkBox_ad_zst.isChecked()
        simuCircuit2 = self.checkBox_zst_isdnd.isChecked()
        
        # Couches des zones de dépôt
        zdLayer1 = self.suivi_couche_ad.currentLayer()
        zdLayer2 = self.suivi_couche_zst.currentLayer()
        zdLayer3 = self.suivi_couche_exutoire.currentLayer()
        
        isCollecteParBassin = self.partition_radio_on.isChecked() # Collecte par bassin 
        
        # Durées des opérations
        dureeChgt = self.input_chgt_duree_base.value()
        dureeDechgt = self.input_duree_base_dechgt.value()
        # Durées des opérations : options avancées
        isDureeChgtSelonVolume = self.check_duree_selon_volume.isChecked() # Durée en fonction du volume
        dureeMinChgt = self.input_duree_min.value()
        dureeMaxChgt = self.input_duree_max.value()
        isDureeDechgtSelonVolume = self.check_duree_selon_volume_2.isChecked()        
        dureeMinDechgt = self.input_duree_min_4.value()
        dureeMaxDechgt = self.input_duree_max_4.value()

        isDureeChgtSelonEquipment = self.checkBox_duree_reduite.isChecked() # Durée en fonction de l'équipement
        equipmentAdAttr = self.input_filter_attr_2.currentText()
        dureeEquipedAd = self.input_duree_reduite_2.value()
        isDureeDechgtSelonEquipment = self.checkBox_duree_reduite_4.isChecked()
        equipmentZstAttr = self.mFieldExpressionWidget_7.currentText() 
        dureeEquipedZST = self.doubleSpinBox_25.value()
        isPenaliteTrafic = self.checkBox_18.isChecked() # Pénalité due au trafic
        
        # Acteurs de collecte
        nbVehicules = self.nbVehicules_spinBox.value()
        capaMaxMoy = self.capaMaxMoy_doubleSpinBox.value()
        
        return { "simuCircuit1" : simuCircuit1, "simuCircuit2" : simuCircuit2,
        "zdLayer1" : zdLayer1, "zdLayer2" : zdLayer2, "zdLayer3" : zdLayer3,
        "isCollecteParBassin" : isCollecteParBassin,
        "dureeChgt" : dureeChgt, "dureeDechgt" : dureeDechgt,
        "isDureeChgtSelonVolume" : isDureeChgtSelonVolume,
        "dureeMinChgt" : dureeMinChgt, "dureeMaxChgt" : dureeMaxChgt,
        "isDureeDechgtSelonVolume" : isDureeDechgtSelonVolume,
        "dureeMinDechgt" : dureeMinDechgt, "dureeMaxDechgt" : dureeMaxDechgt,
        "isDureeChgtSelonEquipment" : isDureeChgtSelonEquipment,
        "equipmentAdAttr" : equipmentAdAttr, "dureeEquipedAd" : dureeEquipedAd,
        "isDureeDechgtSelonEquipment" : isDureeDechgtSelonEquipment,
        "equipmentZstAttr" : equipmentZstAttr,
        "dureeEquipedZST" : dureeEquipedZST,
        "isPenaliteTrafic" : isPenaliteTrafic,
        "nbVehicules" : nbVehicules,
        "capaMaxMoy" : capaMaxMoy
        }
        
        
